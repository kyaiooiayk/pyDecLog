{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"pyDecLog pyDecLog: a simple and easy to use Python module for logging via decorators. \ud83d\ude80Useful for Keep track of Python pipelines. Log info about a function during development both via Python script or Jupyter Notebook. \ud83c\udfa8Available decorators @arguments : log function's args and kwargs @comment : log all function's inner print statements @description : log function's output from the __doc__ dunder method @machine : log machine OS system and hardware @memory : log function's args, kwargs and output memory usage @message : log function's print statements @profile_locals : log function's local persistent variables @signature : log function's signature @timing : log function's elapsed time @typing : log function's args, kwargs and output type @user : log user info \ud83e\ude84Features Mix and match the decorators you want. Can control logging levels as a whole or individually. Choose from the following: CRITICAL ERROR WARNING INFO DEBUG Can control where logging messages are piped: to log file or both log file and console. When controlling the message at the console level the following hierarchy is enforced: CRITICAL : 50 ERROR : 40 WARNING : 30 INFO : 20 DEBUG : 10 NOTSET : 0 Can add comments directly to log file even outside a function.","title":"About"},{"location":"about/#pydeclog","text":"pyDecLog: a simple and easy to use Python module for logging via decorators.","title":"pyDecLog"},{"location":"about/#useful-for","text":"Keep track of Python pipelines. Log info about a function during development both via Python script or Jupyter Notebook.","title":"\ud83d\ude80Useful for"},{"location":"about/#available-decorators","text":"@arguments : log function's args and kwargs @comment : log all function's inner print statements @description : log function's output from the __doc__ dunder method @machine : log machine OS system and hardware @memory : log function's args, kwargs and output memory usage @message : log function's print statements @profile_locals : log function's local persistent variables @signature : log function's signature @timing : log function's elapsed time @typing : log function's args, kwargs and output type @user : log user info","title":"\ud83c\udfa8Available decorators"},{"location":"about/#features","text":"Mix and match the decorators you want. Can control logging levels as a whole or individually. Choose from the following: CRITICAL ERROR WARNING INFO DEBUG Can control where logging messages are piped: to log file or both log file and console. When controlling the message at the console level the following hierarchy is enforced: CRITICAL : 50 ERROR : 40 WARNING : 30 INFO : 20 DEBUG : 10 NOTSET : 0 Can add comments directly to log file even outside a function.","title":"\ud83e\ude84Features"},{"location":"installation/","text":"\u2699\ufe0fInstallation Create your own virtual environment and run pip install -r requirements.txt Via pip: pip install pyDecLog \ud83d\udd17Dependencies PyDevLog requires Python 3.5 or higher, and the following packages: pympler numpy","title":"Installation"},{"location":"installation/#installation","text":"Create your own virtual environment and run pip install -r requirements.txt Via pip: pip install pyDecLog","title":"\u2699\ufe0fInstallation"},{"location":"installation/#dependencies","text":"PyDevLog requires Python 3.5 or higher, and the following packages: pympler numpy","title":"\ud83d\udd17Dependencies"},{"location":"quickstart/","text":"\ud83d\ude80Quick start Say we have the following workflow from pyDecLog import arguments from pyDecLog import signature from pyDecLog import message from pyDecLog import timing from pyDecLog import lprint from pyDecLog import description import time def workflow(): # Set console level to the same level of the message level so it is shown in the console lprint(console_log_level=\"info\").info(\"Workflow starts!\") # Decorate function as needed @doscription @signature @arguments @timing @message def sum_two_int(first, second=2): \"\"\"Sum two numbers.\"\"\" print(\"Some message on console\") result = first + second time.sleep(2) print(\"Result is: \" + str(result)) return result sum_tow_int(1, 1) # Set console level to the same level of the message so it is shown in the console lprint(console_log_level=\"info\").info(\"Workflow ends!\") if __name__ == \"__main__\": workflow() Upon execution the following is printed on console: Workflow starts! Workflow ends! Upon execution a LOG.log file is written: 2023/06/24 | 18:20:50 | ERROR Workflow starts! 2023/06/24 | 18:20:50 | DEBUG Method's description: Sum two numbers. 2023/06/24 | 18:20:50 | DEBUG Method's name: sum_ 2023/06/24 | 18:20:50 | DEBUG Method's signature:(first, second=2) 2023/06/24 | 18:20:50 | DEBUG Method's name: sum_ 2023/06/24 | 18:20:50 | DEBUG Method's args: (1, 1) 2023/06/24 | 18:20:50 | DEBUG Method's kwargs: {} 2023/06/24 | 18:20:52 | INFO Some message on console 2023/06/24 | 18:20:52 | INFO Result is: 2 2023/06/24 | 18:20:52 | DEBUG sum_ was executed in: 2.006 sec 2023/06/24 | 18:20:52 | ERROR Workflow ends!","title":"Quickstart"},{"location":"quickstart/#quick-start","text":"Say we have the following workflow from pyDecLog import arguments from pyDecLog import signature from pyDecLog import message from pyDecLog import timing from pyDecLog import lprint from pyDecLog import description import time def workflow(): # Set console level to the same level of the message level so it is shown in the console lprint(console_log_level=\"info\").info(\"Workflow starts!\") # Decorate function as needed @doscription @signature @arguments @timing @message def sum_two_int(first, second=2): \"\"\"Sum two numbers.\"\"\" print(\"Some message on console\") result = first + second time.sleep(2) print(\"Result is: \" + str(result)) return result sum_tow_int(1, 1) # Set console level to the same level of the message so it is shown in the console lprint(console_log_level=\"info\").info(\"Workflow ends!\") if __name__ == \"__main__\": workflow() Upon execution the following is printed on console: Workflow starts! Workflow ends! Upon execution a LOG.log file is written: 2023/06/24 | 18:20:50 | ERROR Workflow starts! 2023/06/24 | 18:20:50 | DEBUG Method's description: Sum two numbers. 2023/06/24 | 18:20:50 | DEBUG Method's name: sum_ 2023/06/24 | 18:20:50 | DEBUG Method's signature:(first, second=2) 2023/06/24 | 18:20:50 | DEBUG Method's name: sum_ 2023/06/24 | 18:20:50 | DEBUG Method's args: (1, 1) 2023/06/24 | 18:20:50 | DEBUG Method's kwargs: {} 2023/06/24 | 18:20:52 | INFO Some message on console 2023/06/24 | 18:20:52 | INFO Result is: 2 2023/06/24 | 18:20:52 | DEBUG sum_ was executed in: 2.006 sec 2023/06/24 | 18:20:52 | ERROR Workflow ends!","title":"\ud83d\ude80Quick start"}]}